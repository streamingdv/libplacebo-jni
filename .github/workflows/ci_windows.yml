name: CI Windows
on:
  workflow_dispatch:
    inputs:
      build_glslang:
        description: 'Build glslang (true/false)'
        required: true
        default: 'false' # to save time, actual build is already in libs folder
      build_libplacebo:
        description: 'Build libplacebo (true/false)'
        required: true
        default: 'true' # to save time, actual build is already in libs folder
      build_shaderc:
        description: 'Build shaderc (true/false)'
        required: true
        default: 'false' # not needed
      build_vulkan-loader:
        description: 'Build vulkan-loader (true/false)'
        required: true
        default: 'false' # not needed
      build_lcms2:
        description: 'Build lcms2 (true/false)'
        required: true
        default: 'false' # not needed

jobs:
  build-binaries-windows:
    name: Build Windows lib
    runs-on: windows-latest
    env:
      BUILD_GLSLANG: ${{ github.event.inputs.build_glslang }}
      BUILD_LIBPLACEBO: ${{ github.event.inputs.build_libplacebo }}
      BUILD_SHADERC: ${{ github.event.inputs.build_shaderc }}
      BUILD_VULKAN_LOADER: ${{ github.event.inputs.build_vulkan }}
      BUILD_LCMS2: ${{ github.event.inputs.build_lcms2 }}

    strategy:
      matrix:
        include:
          - sys: UCRT64
            env: ucrt-x86_64
            arch: 64bit
            archValue: 64
            archAltValue: x64
          - sys: MINGW32 # disable for testing now
            env: i686
            arch: 32bit
            archValue: 32
            archAltValue: x32

    steps:
      - name: Checkout libplacebo-jni repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout Nuklear library
        uses: actions/checkout@v2
        with:
          repository: 'Immediate-Mode-UI/Nuklear'
          path: 'Nuklear'
          ref: '4.10.7'

      - name: Checkout shaderc repository
        if: env.BUILD_SHADERC == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'google/shaderc'
          path: 'shaderc'
          ref: 'v2023.7'

      - name: Checkout glslang repository
        if: env.BUILD_GLSLANG == 'true'
        uses: actions/checkout@v4
        with:
          repository: 'KhronosGroup/glslang'
          path: 'glslang'

      - name: Checkout vulkan-loader repository
        if: env.BUILD_VULKAN_LOADER == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'KhronosGroup/Vulkan-Loader'
          path: 'vulkan-loader'

      - name: Checkout Little-CMS repository
        if: env.BUILD_LCMS2 == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'mm2/Little-CMS'
          path: 'Little-CMS'

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          install: >-
            base-devel
            git
            unzip
            xxhash
            libxxhash
            mingw-w64-${{ matrix.env }}-jq
            mingw-w64-${{ matrix.env }}-gcc
            mingw-w64-${{ matrix.env }}-pkg-config
            mingw-w64-${{ matrix.env }}-vapoursynth
            mingw-w64-${{ matrix.env }}-meson
            mingw-w64-${{ matrix.env }}-ninja
            mingw-w64-${{ matrix.env }}-spirv-tools
            mingw-w64-${{ matrix.env }}-spirv-cross
            mingw-w64-${{ matrix.env }}-vulkan
            mingw-w64-${{ matrix.env }}-vulkan-headers
            mingw-w64-${{ matrix.env }}-vulkan-loader
            mingw-w64-${{ matrix.env }}-lcms2
            mingw-w64-${{ matrix.env }}-glslang
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-python
            mingw-w64-${{ matrix.env }}-python

      - name: Build Little-CMS
        if: env.BUILD_LCMS2 == 'true'
        working-directory: ./Little-CMS
        run: |
          meson setup build --buildtype release --default-library=static
          meson compile -C build
          meson install -C build
        shell: msys2 {0}

      - name: Upload Little-CMS
        if: env.BUILD_LCMS2 == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lcms2-windows-${{ matrix.arch }}
          path: ${{github.workspace}}/Little-CMS

      - name: Build shaderc
        if: env.BUILD_SHADERC == 'true'
        working-directory: ./shaderc
        run: |
          ./utils/git-sync-deps
          mkdir -p build
          cd build
          cmake -DSHADERC_SKIP_TESTS=ON ..
          cmake --build . --config Release
        shell: msys2 {0}

      - name: Upload shaderc artefacts
        if: env.BUILD_SHADERC == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: shaderc-artefacts-${{ matrix.arch }}
          path: ${{github.workspace}}/shaderc

      - name: Build vulkan-loader
        if: env.BUILD_VULKAN_LOADER == 'true'
        working-directory: ./vulkan-loader
        run: |
          cmake -S . -B build -D UPDATE_DEPS=On
          cmake --build build --config Release
        shell: msys2 {0}

      - name: Upload vulkan-loader artefacts
        if: env.BUILD_VULKAN_LOADER == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: vulkan-loader-artefacts-${{ matrix.arch }}
          path: ${{github.workspace}}/vulkan-loader

      - name: Update glslang sources
        if: env.BUILD_GLSLANG == 'true'
        working-directory: ./glslang
        run: ./update_glslang_sources.py
        shell: msys2 {0}

      - name: Build glslang
        if: env.BUILD_GLSLANG == 'true'
        working-directory: ./glslang
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="$(pwd)/install" .
          cmake --build . --config Release --target install
        shell: msys2 {0}

      - name: Upload gslang artefacts
        if: env.BUILD_GLSLANG == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gslang-artefacts-${{ matrix.arch }}
          path: ${{github.workspace}}/glslang/install

      - name: Apply fix_p010_rendering patch to libplacebo
        #if: env.BUILD_LIBPLACEBO == 'true'
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: |
          git apply ../fix_p010_rendering.patch
        shell: msys2 {0}

      - name: Build libplacebo
        #if: env.BUILD_LIBPLACEBO == 'true'
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: |
          meson setup build --buildtype release --default-library=static -Ddemos=false -Dprefix=$PWD/install
          meson compile -vC build
          meson install -C build
        shell: msys2 {0}

      - name: Upload libplacebo artefacts
        #if: env.BUILD_LIBPLACEBO == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: libplacebo-artefacts-${{ matrix.arch }}
          path: ${{github.workspace}}/libplacebo-jni-native/3rdparty/libplacebo/install

      - name: Build libplacebo-jni-java compile java
        run: |
          ./gradlew clean
          ./gradlew libplacebo-jni-java:compileJava
        shell: msys2 {0}

      - name: Configure and Build libplacebo-jni with CMake
        run: |
          NATIVE_BINARIES_DIR_UNIX=$(cygpath "${{github.workspace}}/build/nativeBinaries")
          GENERATED_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/build/generatedHeaders")
      
          if [ "${{ env.BUILD_GLSLANG }}" = "true" ]; then
            GLSLANG_LIBS_DIR_UNIX=$(cygpath "${{github.workspace}}/glslang/install/lib")
            GLSLANG_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/glslang/install/include")
          else
            GLSLANG_LIBS_DIR_UNIX=$(cygpath "${{github.workspace}}/libs/glslang/windows/${{ matrix.archAltValue }}/lib")
            GLSLANG_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/libs/glslang/windows/${{ matrix.archAltValue }}/include")
          fi
          
          LIBPLACEBO_LIB_PATH_UNIX=$(cygpath "${{github.workspace}}/libplacebo-jni-native/3rdparty/libplacebo/install/lib/libplacebo.a")
          LIBPLACEBO_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/libplacebo-jni-native/3rdparty/libplacebo/install/include")
      
          cmake -G "Ninja" -B build -S ./libplacebo-jni-native \
            -DCMAKE_BUILD_TYPE=Release \
            -DVULKAN_LIB_DIR=$(cygpath "${{github.workspace}}/libs/vulkan-loader/windows/${{ matrix.archAltValue }}") \
            -DLIBPLACEBO_LIB_PATH=${LIBPLACEBO_LIB_PATH_UNIX} \
            -DLIBPLACEBO_HEADERS_DIR=${LIBPLACEBO_HEADERS_DIR_UNIX} \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
            -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
            -DGENERATED_JNI_HEADERS_DIR=${GENERATED_HEADERS_DIR_UNIX} \
            -DGLSLANG_LIBS_DIR=${GLSLANG_LIBS_DIR_UNIX} \
            -DGLSLANG_HEADERS_DIR=${GLSLANG_HEADERS_DIR_UNIX} \
            -DSHADERC_LIB_DIR=$(cygpath "${{github.workspace}}/libs/shaderc/windows/${{ matrix.archAltValue }}/lib") \
            -DSHADERC_HEADERS_DIR=$(cygpath "${{github.workspace}}/libs/shaderc/windows/${{ matrix.archAltValue }}/include") \
            -DFFMPEG_DIR=$(cygpath "${{github.workspace}}/libs/ffmpeg/windows/${{ matrix.archAltValue }}") \
            -DLCMS2_DIR=$(cygpath "${{github.workspace}}/libs/lcms2/windows/${{ matrix.archAltValue }}") \
            -DNUKLEAR_DIR=$(cygpath "${{github.workspace}}/Nuklear") \
            -DVKMEMALLOC_HEADERS=$(cygpath "${{github.workspace}}/libs/vulkan-memory-allocator/include")
          cmake --build build
        shell: msys2 {0}

      - name: Rename DLL file
        run: mv ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native.dll ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native-${{ matrix.archValue }}.dll

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-libjerasure-jni-artifact-${{ matrix.arch }}
          path: ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native-${{ matrix.archValue }}.dll
