name: CI Windows
on:
  workflow_dispatch:

jobs:
  build-binaries-windows:
    name: Build Windows lib
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - sys: UCRT64
            env: ucrt-x86_64
            arch: 64bit
            archValue: 64
          - sys: MINGW32
            env: i686
            arch: 32bit
            archValue: 32

    steps:
      - name: Checkout libplacebo-jni repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout glslang repository
        uses: actions/checkout@v2
        with:
          repository: 'KhronosGroup/glslang'
          path: 'glslang'

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          install: >-
            base-devel
            git
            mingw-w64-${{ matrix.env }}-jq
            mingw-w64-${{ matrix.env }}-gcc
            mingw-w64-${{ matrix.env }}-pkg-config
            mingw-w64-${{ matrix.env }}-vapoursynth
            mingw-w64-${{ matrix.env }}-meson
            mingw-w64-${{ matrix.env }}-ninja
            mingw-w64-${{ matrix.env }}-spirv-tools
            mingw-w64-${{ matrix.env }}-spirv-cross
            mingw-w64-${{ matrix.env }}-vulkan
            mingw-w64-${{ matrix.env }}-vulkan-headers
            mingw-w64-${{ matrix.env }}-vulkan-loader
            mingw-w64-${{ matrix.env }}-libdovi
            mingw-w64-${{ matrix.env }}-lcms2
            mingw-w64-${{ matrix.env }}-shaderc
            mingw-w64-${{ matrix.env }}-glslang
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-python

      - name: Cache glslang build
        id: cache-glslang
        uses: actions/cache@v2
        with:
          path: glslang/install
          key: ${{ runner.os }}-glslang-${{ hashFiles('glslang/**') }}
          restore-keys: ${{ runner.os }}-glslang-

      - name: Update glslang sources
        if: steps.cache-glslang.outputs.cache-hit != 'true'
        working-directory: ./glslang
        run: ./update_glslang_sources.py
        shell: msys2 {0}

      - name: Build glslang
        if: steps.cache-glslang.outputs.cache-hit != 'true'
        working-directory: ./glslang
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="$(pwd)/install" .
          cmake --build . --config Release --target install
        shell: msys2 {0}

      #- name: Build libplacebo
      #  working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
      #  run: |
      #    meson setup build --buildtype release --default-library=static -Ddemos=false -Dprefix=$PWD/install
      #    meson compile -vC build
      #    meson install -C build
      #  shell: msys2 {0}
#
      #- name: Build libplacebo-jni-java compile java
      #  run: |
      #    ./gradlew clean
      #    ./gradlew libplacebo-jni-java:compileJava
      #  shell: msys2 {0}
#
      #- name: Configure and Build libplacebo-jni with CMake
      #  run: |
      #    NATIVE_BINARIES_DIR_UNIX=$(cygpath "${{github.workspace}}/build/nativeBinaries")
      #    GENERATED_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/build/generatedHeaders")
      #    GLSLANG_LIBS_DIR_UNIX=$(cygpath "${{github.workspace}}/glslang/install/lib")
      #    GLSLANG_HEADERS_DIR_UNIX=$(cygpath "${{github.workspace}}/glslang/install/include")
      #    cmake -G "Ninja" -B build -S ./libplacebo-jni-native \
      #      -DCMAKE_BUILD_TYPE=Release \
      #      -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
      #      -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
      #      -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${NATIVE_BINARIES_DIR_UNIX} \
      #      -DGENERATED_JNI_HEADERS_DIR=${GENERATED_HEADERS_DIR_UNIX} \
      #      -DGLSLANG_LIBS_DIR=${GLSLANG_LIBS_DIR_UNIX} \
      #      -DGLSLANG_HEADERS_DIR=${GLSLANG_HEADERS_DIR_UNIX}
      #    cmake --build build
      #  shell: msys2 {0}
#
      #- name: Rename DLL file
      #  run: mv ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native.dll ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native-${{ matrix.archValue }}.dll
#
      #- name: Upload Artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: windows-libjerasure-jni-artifact-${{ matrix.arch }}
      #    path: ${{github.workspace}}/build/nativeBinaries/libplacebo-jni-native-${{ matrix.archValue }}.dll
#