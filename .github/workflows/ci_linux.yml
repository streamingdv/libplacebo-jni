name: CI Linux
on:
  workflow_dispatch:
    inputs:
      build_libplacebo:
        description: 'Build libplacebo (true/false)'
        required: true
        default: 'false' # to save time, actual build is already in libs folder
      build_shaderc:
        description: 'Build shaderc (true/false)'
        required: true
        default: 'false' # not needed
      build_vulkan-loader:
        description: 'Build vulkan-loader (true/false)'
        required: true
        default: 'false' # not needed
      build_lcms2:
        description: 'Build lcms2 (true/false)'
        required: true
        default: 'false' # not needed

jobs:
  build-binaries-unix:
    name: Build unix lib in container
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/streamingdv/libplacebo-jni-debian10:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      BUILD_LIBPLACEBO: ${{ github.event.inputs.build_libplacebo }}
      BUILD_SHADERC: ${{ github.event.inputs.build_shaderc }}
      BUILD_VULKAN_LOADER: ${{ github.event.inputs.build_vulkan }}
      BUILD_LCMS2: ${{ github.event.inputs.build_lcms2 }}

    steps:
      - name: Checkout libplacebo-jni repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout Nuklear library
        uses: actions/checkout@v2
        with:
          repository: 'Immediate-Mode-UI/Nuklear'
          path: 'Nuklear'
          ref: '4.10.7'

      - name: Checkout shaderc repository
        if: env.BUILD_SHADERC == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'google/shaderc'
          path: 'shaderc'
          ref: 'v2024.0'

      - name: Checkout vulkan-loader repository
        if: env.BUILD_VULKAN_LOADER == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'KhronosGroup/Vulkan-Loader'
          path: 'vulkan-loader'

      - name: Checkout Little-CMS repository
        if: env.BUILD_LCMS2 == 'true'
        uses: actions/checkout@v2
        with:
          repository: 'mm2/Little-CMS'
          path: 'Little-CMS'

      - name: Extract glslang package
        run: |
          unzip glslang-linux-x64_x86-release-14.0.0.zip -d ./glslang-package

      - name: Copy glslang headers to /usr/include/
        run: |
          cp -r ./glslang-package/glslang-release-14.0.0/include/glslang /usr/include/

      - name: Copy glslang libs to /usr/lib/x86_64-linux-gnu/
        run: |
          cp -r ./glslang-package/glslang-release-14.0.0/lib/x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu/

      - name: Copy pkgconfig files to /usr/lib/x86_64-linux-gnu/pkgconfig
        run: |
          cp ./glslang-package/glslang-release-14.0.0/pkgconfig/* /usr/lib/x86_64-linux-gnu/pkgconfig/

      - name: Build Little-CMS
        if: env.BUILD_LCMS2 == 'true'
        working-directory: ./Little-CMS
        run: |
          meson setup build --buildtype release --default-library=static
          meson compile -C build
          meson install -C build

      - name: Upload Little-CMS
        if: env.BUILD_LCMS2 == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lcms2-linux-x64bit
          path: ${{ github.workspace }}/Little-CMS

      - name: Build shaderc
        if: env.BUILD_SHADERC == 'true'
        working-directory: ./shaderc
        run: |
          ./utils/git-sync-deps
          mkdir -p build
          cd build
          cmake -DSHADERC_SKIP_TESTS=ON -DSHADERC_SKIP_EXAMPLES=ON -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release

      - name: Upload shaderc artefacts
        if: env.BUILD_SHADERC == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: shaderc-artefacts-x64
          path: ${{ github.workspace }}/shaderc

      - name: Build vulkan-loader
        if: env.BUILD_VULKAN_LOADER == 'true'
        working-directory: ./vulkan-loader
        run: |
          cmake -S . -B build -D UPDATE_DEPS=On
          cmake --build build --config Release

      - name: Upload vulkan-loader artefacts
        if: env.BUILD_VULKAN_LOADER == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: vulkan-loader-artefacts-x64
          path: ${{ github.workspace }}/vulkan-loader

      - name: Debug Confirm meson and ninja versions
        run: |
          which meson || echo "meson not found"
          meson --version || echo "meson failed"
          which ninja || echo "ninja not found"
          ninja --version || echo "ninja failed"

      - name: Debug Check pkg-config xxhash
        run: pkg-config --exists libxxhash && echo "Found xxhash" || echo "Missing xxhash"

      - name: Apply fix_reuse_swapchain patch to libplacebo
        #if: env.BUILD_LIBPLACEBO == 'true'
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: git apply ../fix_reuse_swapchain.patch

      - name: Apply vulkan use 16 bit for p010 to libplacebo
        #if: env.BUILD_LIBPLACEBO == 'true'
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: git apply ../vulkan_use_16bit_for_p010.patch

      - name: Remove problematic <version> include from common.h
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: |
          sed -i '/#include <version>/d' src/common.h

      - name: Verify common.h patch
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: grep version src/common.h || echo "<version> successfully removed"

      - name: Build libplacebo
        #if: env.BUILD_LIBPLACEBO == 'true'
        working-directory: ./libplacebo-jni-native/3rdparty/libplacebo
        run: |
          meson setup build --buildtype release --default-library=static -Ddemos=false -Dprefix=$PWD/install
          meson compile -vC build
          meson install -C build

      - name: Upload libplacebo artefacts
        #if: env.BUILD_LIBPLACEBO == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: libplacebo-artefacts-x64
          path: ${{ github.workspace }}/libplacebo-jni-native/3rdparty/libplacebo/install

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install jq
        run: apt-get update && apt-get install -y jq

      - name: Build libplacebo-jni-java compile java
        run: |
          ./gradlew clean
          ./gradlew libplacebo-jni-java:compileJava

      - name: Configure and Build libplacebo-jni with CMake
        run: |
          FULL_REPO_PATH="/__w/libplacebo-jni/libplacebo-jni"
          LIBPLACEBO_LIB_PATH=${FULL_REPO_PATH}/libplacebo-jni-native/3rdparty/libplacebo/install/lib/x86_64-linux-gnu/libplacebo.a
          LIBPLACEBO_HEADERS_DIR=${FULL_REPO_PATH}/libplacebo-jni-native/3rdparty/libplacebo/install/include

          cmake -G "Ninja" -B build -S ./libplacebo-jni-native \
            -DCMAKE_BUILD_TYPE=Release \
            -DVULKAN_LIB_DIR="${FULL_REPO_PATH}/libs/vulkan-loader/linux/x64" \
            -DLIBPLACEBO_LIB_PATH="${LIBPLACEBO_LIB_PATH}" \
            -DLIBPLACEBO_HEADERS_DIR="${LIBPLACEBO_HEADERS_DIR}" \
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY="${FULL_REPO_PATH}/build/nativeBinaries" \
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY="${FULL_REPO_PATH}/build/nativeBinaries" \
            -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY="${FULL_REPO_PATH}/build/nativeBinaries" \
            -DGENERATED_JNI_HEADERS_DIR="${FULL_REPO_PATH}/build/generatedHeaders" \
            -DSHADERC_LIB_DIR="${FULL_REPO_PATH}/libs/shaderc/linux/x64/lib" \
            -DSHADERC_HEADERS_DIR="${FULL_REPO_PATH}/libs/shaderc/linux/x64/include" \
            -DFFMPEG_DIR="${FULL_REPO_PATH}/libs/ffmpeg/linux/x64" \
            -DLCMS2_DIR="${FULL_REPO_PATH}/libs/lcms2/linux/x64" \
            -DNUKLEAR_DIR="${FULL_REPO_PATH}/Nuklear" \
            -DVKMEMALLOC_HEADERS="${FULL_REPO_PATH}/libs/vulkan-memory-allocator/include" \
            -DIS_RUNNING_ON_WINDOWS=OFF

          cmake --build build

      - name: Rename DLL file
        run: |
          cp /__w/libplacebo-jni/libplacebo-jni/build/nativeBinaries/libplacebo-jni-native.so \
             /__w/libplacebo-jni/libplacebo-jni/libplacebo-jni-native-64.so

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-libplacebo-jni-artifact-64bit
          path: /__w/libplacebo-jni/libplacebo-jni/libplacebo-jni-native-64.so