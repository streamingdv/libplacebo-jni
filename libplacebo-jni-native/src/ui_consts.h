// glyphs
static const nk_rune glyph_range_latin[]     = { 0x0020, 0x00FF, 0 };
static const nk_rune glyph_range_cyrillic[]  = { 0x0020, 0x00FF, 0x0400, 0x04FF, 0 };
static const nk_rune glyph_range_hindi[]     = { 0x0020, 0x00FF, 0x0900, 0x097F, 0 };
static const nk_rune glyph_range_japanese[]  = { 0x0020, 0x00FF, 0x3000, 0x303F, 0x3040, 0x309F, 0x30A0, 0x30FF, 0x4E00, 0x4FFF, 0 };
static const nk_rune glyph_range_korean[]    = { 0x0020, 0x00FF, 0x3000, 0x303F, 0xAC00, 0xD7AF, 0 };
static const nk_rune glyph_range_chinese[]   = { 0x0020, 0x00FF, 0x3000, 0x303F, 0x4E00, 0x9FFF, 0x2010, 0x205E, 0 };
static const nk_rune glyph_range_chinese_fallback[] = {
    0x0020, 0x00FF,     // Basic Latin (space, punctuation, ASCII)
    0x3002, 0x3002,     // 。 (Ideographic full stop)
    0x4E0A, 0x4E0B,
    0x4E0D, 0x4E0D,
    0x4E14, 0x4E14,
    0x4E2D, 0x4E2D,
    0x4E32, 0x4E32,
    0x4E3B, 0x4E3B,
    0x4E8E, 0x4E8E,
    0x4ECD, 0x4ECD,
    0x4ED6, 0x4ED6,
    0x4F11, 0x4F11,
    0x4F1A, 0x4F1A,
    0x4F20, 0x4F20,
    0x4F60, 0x4F60,
    0x4F8B, 0x4F8B,
    0x4FDD, 0x4FDD,
    0x5176, 0x5176,
    0x51B3, 0x51B3,
    0x51B5, 0x51B5,
    0x5207, 0x5207,
    0x521D, 0x521D,
    0x5230, 0x5230,
    0x5236, 0x5236,
    0x52A8, 0x52A8,
    0x52D5, 0x52D5,
    0x5316, 0x5316,
    0x5361, 0x5361,
    0x53D1, 0x53D1,
    0x53D6, 0x53D6,
    0x53F0, 0x53F0,
    0x540C, 0x540C,
    0x542F, 0x542F,
    0x544A, 0x544A,
    0x554F, 0x554F,
    0x555F, 0x555F,
    0x5617, 0x5617,
    0x5668, 0x5668,
    0x56DE, 0x56DE,
    0x56FE, 0x56FE,
    0x5728, 0x5728,
    0x5831, 0x5831,
    0x5907, 0x5907,
    0x5916, 0x5916,
    0x591A, 0x591A,
    0x5931, 0x5931,
    0x5982, 0x5982,
    0x59CB, 0x59CB,
    0x5B58, 0x5B58,
    0x5B9A, 0x5B9A,
    0x5C06, 0x5C07,
    0x5C1D, 0x5C1D,
    0x5E76, 0x5E76,
    0x5E8F, 0x5E8F,
    0x5F0F, 0x5F0F,
    0x5F15, 0x5F15,
    0x5F71, 0x5F71,
    0x606F, 0x606F,
    0x60A8, 0x60A8,
    0x60C5, 0x60C5,
    0x62A5, 0x62A5,
    0x6301, 0x6301,
    0x6362, 0x6362,
    0x63A7, 0x63A7,
    0x63DB, 0x63DB,
    0x64AD, 0x64AD,
    0x64CE, 0x64CE,
    0x653E, 0x653E,
    0x6557, 0x6557,
    0x65B0, 0x65B0,
    0x65BC, 0x65BC,
    0x65E0, 0x65E0,
    0x65F6, 0x65F6,
    0x662F, 0x662F,
    0x663E, 0x663E,
    0x6642, 0x6642,
    0x66F4, 0x66F4,
    0x6700, 0x6700,
    0x672A, 0x672A,
    0x679C, 0x679C,
    0x67D3, 0x67D3,
    0x6A21, 0x6A21,
    0x6A5F, 0x6A5F,
    0x6B21, 0x6B21,
    0x6B61, 0x6B64,
    0x6CC1, 0x6CC1,
    0x6CD5, 0x6CD5,
    0x6D41, 0x6D41,
    0x6D88, 0x6D88,
    0x6E32, 0x6E32,
    0x70BA, 0x70BA,
    0x7121, 0x7121,
    0x7136, 0x7136,
    0x7247, 0x7247,
    0x72C0, 0x72C0,
    0x73A9, 0x73A9,
    0x751F, 0x751F,
    0x7528, 0x7528,
    0x767C, 0x767C,
    0x7684, 0x7684,
    0x7720, 0x7720,
    0x7801, 0x7801,
    0x786E, 0x786E,
    0x78BA, 0x78BA,
    0x78BC, 0x78BC,
    0x793A, 0x793A,
    0x7A0B, 0x7A0B,
    0x7AEF, 0x7AEF,
    0x7D42, 0x7D42,
    0x7DDA, 0x7DDA,
    0x7E8C, 0x7E8C,
    0x7EC8, 0x7EC8,
    0x7EE7, 0x7EE7,
    0x7EED, 0x7EED,
    0x7F6E, 0x7F6E,
    0x81F3, 0x81F3,
    0x82E5, 0x82E5,
    0x89C6, 0x89C6,
    0x89E3, 0x89E3,
    0x8A2D, 0x8A2D,
    0x8A66, 0x8A66,
    0x8A8D, 0x8A8D,
    0x8AA4, 0x8AA4,
    0x8ACB, 0x8ACB,
    0x8BBE, 0x8BBE,
    0x8BD5, 0x8BD5,
    0x8BDD, 0x8BDD,
    0x8BEF, 0x8BEF,
    0x8BF7, 0x8BF7,
    0x8D25, 0x8D25,
    0x8F93, 0x8F93,
    0x8FCE, 0x8FCE,
    0x8FDC, 0x8FDC,
    0x9001, 0x9001,
    0x9023, 0x9023,
    0x9047, 0x9047,
    0x904A, 0x904A,
    0x904E, 0x904E,
    0x9060, 0x9060,
    0x91CD, 0x91CD,
    0x932F, 0x932F,
    0x9519, 0x9519,
    0x95EE, 0x95EE,
    0x968F, 0x968F,
    0x984C, 0x984C,
    0x986F, 0x986F,
    0x9891, 0x9891,
    0x9898, 0x9898,
    0x9A45, 0x9A45,
    0x9A71, 0x9A71,
    0xFF01, 0xFF01,     // ！
    0xFF0C, 0xFF0C,     // ，
    0xFF1A, 0xFF1A,     // ：
    0xFF1F, 0xFF1F,     // ？
    0
};
static const nk_rune glyph_range_korean_fallback[] = {
    0x0020, 0x00FF,         // Latin Basic (ASCII + punctuation)
    0xAC00, 0xAC00,
    0xAC19, 0xAC19,
    0xAC8C, 0xAC8C,
    0xACA0, 0xACA0,
    0xACA9, 0xACA9,
    0xACB0, 0xACB0,
    0xACC4, 0xACC4,
    0xACE0, 0xACE0,
    0xACFC, 0xACFC,
    0xADF8, 0xADF8,
    0xAE30, 0xAE30,
    0xAE4C, 0xAE4C,
    0xB0B4, 0xB0B4,
    0xB294, 0xB294,
    0xB2C8, 0xB2C8,
    0xB2E4, 0xB2E4,
    0xB354, 0xB354,
    0xB3C4, 0xB3C4,
    0xB3D9, 0xB3D9,
    0xB418, 0xB418,
    0xB4DC, 0xB4DC,
    0xB514, 0xB514,
    0xB529, 0xB529,
    0xB77C, 0xB77C,
    0xB78D, 0xB78D,
    0xB798, 0xB798,
    0xB7EC, 0xB7EC,
    0xB808, 0xB808,
    0xB80C, 0xB80C,
    0xB85C, 0xB85C,
    0xB8CC, 0xB8CC,
    0xB958, 0xB958,
    0xB974, 0xB974,
    0xB978, 0xB978,
    0xB97C, 0xB97C,
    0xB9AC, 0xB9AC,
    0xB9BC, 0xB9BC,
    0xB9C1, 0xB9C1,
    0xBA74, 0xBA74,
    0xBAA8, 0xBAA8,
    0xBB38, 0xBB38,
    0xBC0D, 0xBC0D,
    0xBC14, 0xBC14,
    0xBC1C, 0xBC1C,
    0xBC84, 0xBC84,
    0xBC88, 0xBC88,
    0xBCF4, 0xBCF4,
    0xBD88, 0xBD88,
    0xBDF0, 0xBDF0,
    0xBE44, 0xBE44,
    0xC0DD, 0xC0DD,
    0xC11C, 0xC11C,
    0xC124, 0xC124,
    0xC138, 0xC138,
    0xC158, 0xC158,
    0xC18C, 0xC18D,
    0xC194, 0xC194,
    0xC218, 0xC218,
    0xC2A4, 0xC2A4,
    0xC2B5, 0xC2B5,
    0xC2DC, 0xC2DC,
    0xC2E0, 0xC2E0,
    0xC2E4, 0xC2E4,
    0xC548, 0xC548,
    0xC54A, 0xC54A,
    0xC5C6, 0xC5C6,
    0xC5D0, 0xC5D0,
    0xC5D4, 0xC5D4,
    0xC5EC, 0xC5EC,
    0xC608, 0xC608,
    0xC624, 0xC624,
    0xC62C, 0xC62C,
    0xC678, 0xC678,
    0xC694, 0xC694,
    0xC6D0, 0xC6D0,
    0xC73C, 0xC73C,
    0xC744, 0xC744,
    0xC74C, 0xC74C,
    0xC758, 0xC758,
    0xC774, 0xC774,
    0xC778, 0xC778,
    0xC791, 0xC791,
    0xC7A5, 0xC7A5,
    0xC7AC, 0xC7AC,
    0xC804, 0xC804,
    0xC815, 0xC815,
    0xC81C, 0xC81C,
    0xC885, 0xC885,
    0xC8FC, 0xC8FC,
    0xC911, 0xC911,
    0xC9C0, 0xC9C0,
    0xC9C4, 0xC9C4,
    0xCD08, 0xCD08,
    0xCD5C, 0xCD5C,
    0xCDE8, 0xCDE8,
    0xCE58, 0xCE58,
    0xCE74, 0xCE74,
    0xCE78, 0xCE78,
    0xCF54, 0xCF54,
    0xCF58, 0xCF58,
    0xD2B8, 0xD2B8,
    0xD328, 0xD328,
    0xD50C, 0xD50C,
    0xD53D, 0xD53D,
    0xD558, 0xD558,
    0xD560, 0xD560,
    0xD574, 0xD574,
    0xD588, 0xD588,
    0xD654, 0xD655,
    0xD658, 0xD658,
    0xD734, 0xD734,
    0x0
};
// sizes
const float buttonSize = 48;
const float menuButtonHeight = buttonSize - 10;
const float menuButtonFontSize = 14 + 4; // 14 + 4 padding
const float bottomPadding = 12;
const float edgePadding = 40;
const float touchpadPadding = 12;
const float dialogHeadingPaddingTop = 44;
const float dialogTextContentPaddingTop = 122;
const float dialogPaddingRight = 36;
const float dialogHeadingHeight = 24 + 2; // 24 + 2 padding
const float dialogButtonHeight = 52 + 2; // 52 + 2 padding
const float dialogButtonWidth = 200;
// colors
const struct nk_color touchpad_white_border_color_alpha = nk_rgba(255, 255, 255, 190);
const struct nk_color touchpad_white_background_color_alpha = nk_rgba(255, 255, 255, 63);
const struct nk_color white_button_color_alpha = nk_rgba(255, 255, 255, 163);
const struct nk_color pressed_white_button_color_alpha = nk_rgba(148, 148, 148, 163);
const struct nk_color white_button_color = nk_rgb(255, 255, 255);
const struct nk_color black_button_color = nk_rgb(0, 0, 0);
const struct nk_color dark_grey_button_color = nk_rgb(17, 17, 17);
const struct nk_color pressed_dark_grey_button_color = nk_rgb(8, 8, 8);
const struct nk_color grey_button_color = nk_rgb(88, 88, 95);
const struct nk_color pressed_grey_button_color = nk_rgb(60, 60, 67);
const struct nk_color dialog_background = nk_rgb(35, 35, 35);
const struct nk_color dialog_blue = nk_rgb(0, 132, 241);
const struct nk_color dialog_yellow = nk_rgb(255, 255, 0);