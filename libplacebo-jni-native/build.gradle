import net.jan.gradle.cmake.tasks.CMakeBuildTask
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
  dependencies {
    classpath files("gradle-cmake.jar")
  }
}

apply plugin: "net.jan.gradle.cmake"

tasks.register('setupMesonPlacebo', Exec) {
  workingDir = "${projectDir}/3rdparty/libplacebo"
  commandLine 'meson', 'setup', 'build', '--buildtype', 'release',
          '--default-library=static', '-Ddemos=false',
          "-Dprefix=${projectDir}/3rdparty/libplacebo/install"
}

// Define a task for compiling the project
tasks.register('compileMesonPlacebo', Exec) {
  workingDir = "${projectDir}/3rdparty/libplacebo"
  commandLine 'meson', 'compile', '-vC', 'build'
}

// Define a task for installing the build
tasks.register('installMesonPlacebo', Exec) {
  workingDir = "${projectDir}/3rdparty/libplacebo"
  commandLine 'meson', 'install', '-C', 'build'
}

tasks.register('setupJni', CMakeBuildTask) {
  sourceDirectory file(".")
  generationDirectory new File(buildDir, "cmake-gen")

  cmake {
    if (is32bit) {
      if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        throw new GradleException("Only windows supports 32bit currently")
      } else {
        arguments = [
                "-A", "Win32",
                "-T", "host=x64"
        ]
      }
    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      arguments = [
              "-A", "x64",
              "-T", "host=x64"
      ]
    }

    variables = [
            "CMAKE_BUILD_TYPE"              : java.util.Optional.of("Release"),
            "CMAKE_RUNTIME_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath),
            "CMAKE_LIBRARY_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath),
            "CMAKE_ARCHIVE_OUTPUT_DIRECTORY": java.util.Optional.of(nativeBinariesDir.absolutePath),
            "GENERATED_JNI_HEADERS_DIR"     : java.util.Optional.of(generatedHeadersDir.absolutePath)
    ]
  }
}

// Define task dependencies
tasks.named('compileMesonPlacebo').configure { dependsOn 'setupMesonPlacebo' }
tasks.named('installMesonPlacebo').configure { dependsOn 'compileMesonPlacebo' }
tasks.named('setupJni').configure { dependsOn 'installMesonPlacebo' }

// Define a new task that will trigger the whole sequence
tasks.register('buildAndInstall') {
  dependsOn 'setupMesonPlacebo', 'compileMesonPlacebo', 'installMesonPlacebo', 'setupJni'
}
