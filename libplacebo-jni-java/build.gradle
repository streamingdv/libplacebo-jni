import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'java-library'
}

group 'com.grill.placebo'
version '1.0'

static def osDependentBinary(name) {
  return Os.isFamily(Os.FAMILY_WINDOWS) ? "${name}.exe" : name
}

static def findJavaC() {
  def javaCBinary = new File(System.getProperty("java.home"), "bin/${osDependentBinary("javac")}")
  if (javaCBinary.exists()) {
    return javaCBinary.absolutePath
  } else {
    javaCBinary = new File(System.getProperty("java.home"), "../bin/${osDependentBinary("javac")}")
    if(javaCBinary.exists()) {
      return javaCBinary.absolutePath
    }

    def path = System.getenv("PATH")
    if (path != null) {
      def paths = path.split(File.pathSeparator)
      for (def currentPath : paths) {
        javaCBinary = new File(currentPath, osDependentBinary("javac"))
        if (javaCBinary.exists()) {
          return javaCBinary.absolutePath
        }
      }
    }
  }

  throw new GradleException("Failed to find javac required for header generation, " +
          "please put it on the PATH or run gradle with a JDK installation!")
}

def javaCCommand = findJavaC()

processResources {
  from(nativeBinaries) {
    into "native-binaries"
  }
}

compileJava {
  options.compilerArgs += ["-h", generatedHeadersDir.getAbsolutePath()]
}